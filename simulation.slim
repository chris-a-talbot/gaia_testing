initialize() {
	// ----------------------------
	// ----------------------------
	// ------ INITIALIZATION ------
	// ----------------------------
	// ----------------------------
	
	// Non-Wright-Fisher model, with pedigrees and tree sequence for logging, in 2D
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T, dimensionality="xy");
	initializeTreeSeq();
	
	// Define base configuration
	defaults = Dictionary(
		"SEED", getSeed(),     // random seed
		"SD", 0.3,             // sigma_D, dispersal distance 
		"SX", 0.3,             // sigma_X, interaction distance for local density
		"SM", 0.3,             // sigma_M, mate choice distance
		"K", 5,                // carrying capacity per unit area
		"WIDTH", 25.0,         // width of the simulated area
		"HEIGHT", 25.0,        // height of the simulated area
		"L", 1e8,              // genome length
		"R", 1e-8,             // recombination rate
		"MU", 0,               // mutation rate
		"RUNTIME", 30000,      // default runtime
		"REP", 1,              // default replicate number
		"PWD", ".",            // default working directory
		"SAMPLE_PERC", 0.01,   // sampling percentage
		"SAMPLE_FREQ", 5,      // sampling frequency
		"PERCENT_PER_TICK", 0.05  // percent to sample per tick
		);
	
	// Override defaults with command line parameters or GUI settings
	if (exists("slimgui")) {
		defaults.setValue("PWD", "C:/Users/chtalbot/Documents/GitHub/gaia_testing");
	}
	
	// Setup parameters and directories
	setupParams(defaults);
	defineConstant("PARAMS", defaults);
	setSeed(SEED);
	
	// Derive dependent constants after parameter setup
	defineConstant("SAMPLE_START", RUNTIME * (1 - SAMPLE_PERC));
	defineConstant("FECUN", 1.0);
	
	// Setup output paths
	defineConstant("PREFIX", "tree-S" + paste(SD) + "-R" + paste(REP));
	defineConstant("TREEFILE", paste(c(PWD, "/trees/", PREFIX, ".trees"), sep=""));
	defineConstant("LOGFILE", paste(c(PWD, "/logs/", PREFIX, ".txt"), sep=""));
	
	// Initialize genomic elements
	initializeGenomicParameters();
	
	// Initialize spatial interactions
	initializeSpatialInteractions();
}

// ----------------------------
// ----------------------------
// ----- HELPER FUNCTIONS -----
// ----------------------------
// ----------------------------

/*
	Initializes genomic parameters for the simulation.
	
	This function sets up the mutation rate, mutation type, genomic element type,
	and recombination rate using global parameters defined in initialization.
	
	Input: void
	Output: void
	Global parameters used: MU, L, R
*/
function (void)initializeGenomicParameters(void) {
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(R);
}

/*
	Initializes spatial interactions for density measurement and mate choice.
	
	Sets up two interaction types:
	1. Density measurement with maximum distance of 3*SX
	2. Mate choice with maximum distance of 3*SM
	Both use normal distribution kernels for spatial effects.
	
	Input: void
	Output: void
	Global parameters used: SX, SM
*/
function (void)initializeSpatialInteractions(void) {
	// Density measurement interaction
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3 * SX);
	i1.setInteractionFunction("n", 1, SX);
	
	// Mate choice interaction
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3 * SM);
	i2.setInteractionFunction("n", 1, SM);
}

/*
	Sets up simulation parameters from defaults, parameter file, and command line.
	
	Handles parameter hierarchy:
	1. Command line arguments (highest priority)
	2. Parameter file values
	3. Default values (lowest priority)
	
	Input:
		defaults (Dictionary): Dictionary containing default parameter values
	Output: void
	Side effects: 
		- Defines global constants for all parameters
		- Prints parameter values to console
*/
function (void)setupParams(object<Dictionary>$ defaults) {
	if (!exists("PARAMFILE"))
		defineConstant("PARAMFILE", "./params.json");
	
	defaults.addKeysAndValuesFrom(Dictionary("PARAMFILE", PARAMFILE));
	
	// Load parameters from file if it exists
	if (fileExists(PARAMFILE)) {
		defaults.addKeysAndValuesFrom(Dictionary(readFile(PARAMFILE)));
		defaults.setValue("READ_FROM_PARAMFILE", PARAMFILE);
	}
	
	// Command line arguments take precedence over both defaults and parameter file
	if (exists("REP"))
		defaults.setValue("REP", REP);
	if (exists("RUNTIME"))
		defaults.setValue("RUNTIME", RUNTIME);
	if (exists("PWD"))
		defaults.setValue("PWD", PWD);
	
	// Define constants for all parameters
	for (k in defaults.allKeys) {
		if (!exists(k))
			defineConstant(k, defaults.getValue(k));
		else
			defaults.setValue(k, executeLambda(k + ";"));
	}
	
	// Log parameters
	catn("===========================");
	catn("Model constants: " + defaults.serialize("pretty"));
	catn("===========================");
}

/*
	Initializes logging features for the simulation.
	
	Creates a log file and sets up columns for:
	- Cycle number
	- Pedigree IDs of sampled individuals
	
	Input: void
	Output: void
	Global parameters used: LOGFILE
	Side effects: Creates and configures a log file
*/
function (void)setupLogging(void) {
	// Create a logfile that appends each time it's edited
	log = community.createLogFile(LOGFILE, append=T);
	
	// Include cycle number as a column in the logs
	log.addCycle();
	
	// Add a column to the logfile that contains customly-selected pedigree IDs
	log.addCustomColumn("pedigree_IDs", "getPedigreeIDs(NULL);");
}

/*
	Updates tree sequence and logging information for the current cycle.
	
	Performs periodic updates to:
	- Remember current individuals in tree sequence (non-permanently)
	- Log data if we're past SAMPLE_START and at the right sampling interval
	
	Input: void
	Output: void
	Global parameters used: SAMPLE_START, SAMPLE_FREQ
	Side effects: Updates tree sequence and log file
*/
function (void)updateTreeSeqAndLogs(void) {
	sim.treeSeqRememberIndividuals(p1.individuals, permanent=F);
	if(sim.cycle >= SAMPLE_START) {
		if(sim.cycle % SAMPLE_FREQ == 0) {
			log = community.logFiles;
			log.logRow();
			print("Logged row for tick " + paste(sim.cycle));
		}
	}
}

/*
	Creates a density map for visualization in SLiMgui.
	
	Generates a heatmap showing population density across the spatial area.
	Only runs when in SLiMgui mode. Colors range from black (low density)
	through orange to red (high density).
	
	Input: void
	Output: void
	Side effects: Creates a spatial map for visualization if in SLiMgui
*/
function (void)createDensityMap(void) {
	if(exists("slimgui")) {
		// Get all individuals and spatial bounds
		inds = p1.individuals;
		bounds = p1.spatialBounds;
		
		// Create density map for visualization purposes	
		density = summarizeIndividuals(inds, c(10, 10), bounds,
			operation="individuals.size();", empty=0.0, perUnitArea=T);
		density = density / max(density);
		p1.defineSpatialMap("density", "xy", density, F,
			range(density), c("black", "orange", "red"));
	}
}

/*
	Samples and records pedigree IDs for a subset of the population.
	
	Randomly samples a percentage of the current population and:
	- Permanently records them in the tree sequence
	- Returns their pedigree IDs as a comma-separated string
	
	Input: 
		n (NULL): Required by SLiM for custom column functions but unused
	Output: 
		string: Comma-separated list of sampled pedigree IDs
	Global parameters used: PERCENT_PER_TICK
	Side effects: Updates tree sequence with permanently remembered individuals
*/
function (string$) getPedigreeIDs(NULL n) {
	// Get a list of extant individuals
	inds = p1.individuals;
	
	// Determine how many to sample
	num_to_remember = asInteger(p1.individualCount*PERCENT_PER_TICK)+1;
	
	// Randomly sample from the population without replacement
	inds_to_remember_perm = sample(inds, num_to_remember);
	
	// Remember the sampled individuals permanently
	sim.treeSeqRememberIndividuals(inds_to_remember_perm, permanent=T);
	
	// Output the pedigree IDs of sampled individuals
	return paste(inds_to_remember_perm.pedigreeID, sep=",");
}

// ----------------------------
// ----------------------------
// ----- BEGIN SIMULATION -----
// ----------------------------
// ----------------------------

1 first() {
	// Create population at carrying capacity
	sim.addSubpop("p1", asInteger(K * WIDTH * HEIGHT));
	
	// Set up the spatial bounds of the simulation
	p1.setSpatialBounds(c(0, 0, WIDTH, HEIGHT));
	
	// Place first individuals random uniformly
	p1.individuals.setSpatialPosition(p1.pointUniform(p1.individualCount));
	
	// Setup logging features
	setupLogging();
}

1: first() {
	// Evaluate potential mates at the start of each year
	i2.evaluate(p1);
}

1: reproduction() {
	// Reproduce at the start of each year
	mate = i2.drawByStrength(individual, 1);
	if (mate.size())
		subpop.addCrossed(individual, mate, count=rpois(1, FECUN));
}

1: early() {
	// Disperse offspring
	offspring = p1.subsetIndividuals(maxAge=0);
	p1.deviatePositions(offspring, "reflecting", INF, "n", SD);
	
	// Simple density regulation: scale offspring survival to maintain K
	baseSize = K * WIDTH * HEIGHT;
	
	if (offspring.size() > baseSize) {
		// Evaluate local density for offspring after dispersal
		i1.evaluate(p1);
		competition = i1.localPopulationDensity(offspring);
		
		// Calculate survival probability based on local density
		targetDensity = K;
		// Rescale competition relative to K
		survivalProb = 1.0 / (1.0 + exp((competition/targetDensity - 1.0) * 0.3));
		
		// Apply survival probability to each offspring
		offspring.fitnessScaling = survivalProb;
	}
}

1: late() {
	// Check for extinction
	if (p1.individualCount == 0) {
		catn("Population went extinct! Ending the simulation.");
		sim.simulationFinished();
	}
	
	// Remove all adults (non-offspring)
	adults = p1.subsetIndividuals(minAge=1);
	adults.fitnessScaling = 0.0;
	
	// Update visualization map if in GUI
	createDensityMap();
	
	// Update tree sequence and logs
	updateTreeSeqAndLogs();
}

RUNTIME late() {
	catn("End of simulation (run time reached)");
	
	// Remember all extant individuals in the tree sequence
	sim.treeSeqRememberIndividuals(p1.individuals, permanent=T);
	
	// Output the tree sequence with PARAMS as metadata
	sim.treeSeqOutput(TREEFILE, metadata=PARAMS);
	
	// End the simulation
	sim.simulationFinished();
}